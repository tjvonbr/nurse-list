// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String    @id @default(uuid())
  sessionToken  String    @unique
  expires       DateTime
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model City {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String        @unique
  cityReviews     CityReview[]

  @@map("cities")
}

model CityReview {
  id                    String          @id @default(uuid())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  contractReviewId      String          @unique
  contractReview        ContractReview  @relation(fields: [contractReviewId], references: [id], onDelete: Cascade)
  cityId                String          
  city                  City            @relation(fields: [cityId], references: [id], onDelete: Cascade)
  overallScore          Int?            @map(name: "overall_score")
  entertainmentScore    Int?            @map(name: "entertainment_score")
  easeOfHousingScore    Int?            @map(name: "easy_of_housing_score")

  @@map("city_reviews")
}

model ContractReview {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  typeformId      String          @unique
  formResponse    Json
  cityReviewId    String?
  cityReview      CityReview?
  hospitalId      String?
  hospitalReview  HospitalReview?  
  userId          String?
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contract_reviews")
}

model Hospital {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  name              String        @unique
  hospitalReviews   HospitalReview[]   

  @@map("hospitals")
}

model HospitalReview {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  contractReviewId  String          @unique
  contractReview    ContractReview  @relation(fields: [contractReviewId], references: [id], onDelete: Cascade)
  hospitalId        String      
  hospital          Hospital        @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  overallScore      Int?            @map(name: "overall_score")

  @@map("hospital_reviews")
}

model User {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  firstName               String      
  lastName                String
  email                   String            @unique
  emailVerified           DateTime?
  accounts                Account[]
  sessions                Session[]
  stripeCustomerId        String?           @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId    String?           @unique @map(name: "stripe_subscription_id")
  stripePriceId           String?           @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd  DateTime?         @map(name: "stripe_current_period_end")
  contractReviews         ContractReview[]

  @@map("users")
}

model VerificationToken {
  identifier  String
  token       String     @unique
  expires     DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}